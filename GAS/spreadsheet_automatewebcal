function calculateWeeklyWorkHours_SingleLog() {
  // --- 1. Specify the  target span (last Mon-Fri) ---
  const today = new Date();
  const dayOfWeek = today.getDay();
  const diffToMonday = (dayOfWeek === 0) ? -6 : 1 - dayOfWeek;
  const monday = new Date(today);
  monday.setDate(today.getDate() + diffToMonday);
  monday.setHours(0, 0, 0, 0);
  const friday = new Date(monday);
  friday.setDate(monday.getDate() + 4);
  friday.setHours(23, 59, 59, 999);

  // --- 2. Get your schedule from your google calender ---
  const calendar = CalendarApp.getDefaultCalendar();
  const events = calendar.getEvents(monday, friday);

  // --- 3. Store the result ---
  const outputLines = [];
  outputLines.push(`集計期間: ${monday.toLocaleDateString()} 〜 ${friday.toLocaleDateString()}`);

  if (events.length === 0) {
    outputLines.push('対象期間に予定はありません。');
  } else {
    const workHours = {};
    for (const event of events) {
      let title = event.getTitle();

      // Specify the title to skip
      if (title.includes('みなさんへ')) {
        continue;
      }

      // Filter the title
      if (title.includes('SFD') || title.includes('作業：') || title.includes('ミーツ')) {
        
        // Hide private schedule ミーツ
        if (title.includes('ミーツ')) {
          title = '【ミーツ】';
        }

        // --- Cauculate working time ---
        const durationInMillis = event.getEndTime().getTime() - event.getStartTime().getTime();
        if (!workHours[title]) {
          workHours[title] = 0;
        }
        workHours[title] += durationInMillis;
      }
    }

    if (Object.keys(workHours).length === 0) {
      outputLines.push('\n集計対象の予定は見つかりませんでした。');
    } else {
      outputLines.push('\n--- タイトル別 合計工数 ---');
      for (const title in workHours) {
        const totalMillis = workHours[title];
        const totalHours = totalMillis / (1000 * 60 * 60);
        outputLines.push(`${title}: 合計 ${totalHours.toFixed(2)} 時間`);
      }
    }
  }

  // --- 4. 配列を改行でつなげて、最後に1回だけログに出力 ---
  Logger.log(outputLines.join('\n'));
}
