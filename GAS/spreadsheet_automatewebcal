function calculateWeeklyWorkHours_SingleLog() {
  // --- 1. 対象期間（今週の月曜日〜金曜日）を計算 ---
  const today = new Date();
  const dayOfWeek = today.getDay(); 
  const diffToMonday = (dayOfWeek === 0) ? -6 : 1 - dayOfWeek;
  const monday = new Date(today);
  monday.setDate(today.getDate() + diffToMonday);
  monday.setHours(0, 0, 0, 0); 
  const friday = new Date(monday);
  friday.setDate(monday.getDate() + 4);
  friday.setHours(23, 59, 59, 999); 

  // --- 2. カレンダーから予定を取得 ---
  const calendar = CalendarApp.getDefaultCalendar();
  const events = calendar.getEvents(monday, friday);

  // --- 3. 結果を一旦配列に保存していく ---
  const outputLines = [];
  outputLines.push(`集計期間: ${monday.toLocaleDateString()} 〜 ${friday.toLocaleDateString()}`);
  
  if (events.length === 0) {
    outputLines.push('対象期間に予定はありません。');
  } else {
    const workHours = {};
    for (const event of events) {
      const title = event.getTitle();

      // タイトルに「XXX」または「[作業：]」が含まれている場合のみ処理する
      if (title.includes('XXX') || title.includes('[作業：]')) {
        const durationInMillis = event.getEndTime().getTime() - event.getStartTime().getTime();
        if (!workHours[title]) {
          workHours[title] = 0;
        }
        workHours[title] += durationInMillis;
      }
    }

    if (Object.keys(workHours).length === 0) {
      outputLines.push('\n集計対象の予定（[SFD]または[作業：]を含むもの）は見つかりませんでした。');
    } else {
      outputLines.push('\n--- タイトル別 合計工数 ---');
      for (const title in workHours) {
        const totalMillis = workHours[title];
        const totalHours = totalMillis / (1000 * 60 * 60);
        outputLines.push(`${title}: 合計 ${totalHours.toFixed(2)} 時間`);
      }
    }
  }

  // --- 4. 配列を改行でつなげて、最後に1回だけログに出力 ---
  Logger.log(outputLines.join('\n'));
}
